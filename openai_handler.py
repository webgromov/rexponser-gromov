import openai
import base64
import logging
import httpx
from config import OPENAI_API_KEY, PROXY_URL

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = openai.AsyncOpenAI(
    api_key=OPENAI_API_KEY,
    http_client=httpx.AsyncClient(proxy=PROXY_URL)
)


async def generate_comment(text: str, photos_base64: list = None, channel_description: str = None, channel_name: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å –ø–æ–º–æ—â—å—é OpenAI
    
    Args:
        text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        photos_base64: –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        channel_description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:100]}...")
    try:
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        channel_context = f"\n–û –∫–∞–Ω–∞–ª–µ: {channel_description}" if channel_description else ""
        
        system_prompt = f"""–¢—ã —É–º–Ω—ã–π –∏ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –≤ Telegram –∫–∞–Ω–∞–ª–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ, —è—Ä–∫–∏–µ –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.

{channel_context}

–¢—ã –ø–∏—à–µ—à—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–º–µ–Ω–∏ –ê–ª–µ–∫—Å–∞ –ì—Ä–æ–º–æ–≤–∞. –ê–ª–µ–∫—Å –ì—Ä–æ–º–æ–≤ - it-–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç AI-–∞–≥–µ–Ω—Ç–æ–≤.
–£ –Ω–µ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π IT-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ï–º—É 22 –≥–æ–¥–∞. –í—ã—Ä–∞–∂–∞–π—Å—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –∫–∞–∫ –±–æ—Ç.

–ü–†–ê–í–ò–õ–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:
- –î–ª–∏–Ω–∞: 2-6 —Å–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º
- –°—Ç–∏–ª—å: –∂–∏–≤–æ–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π emoji, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞: üòÅ‚ö°Ô∏èüî•üòÇüí™üéØüöÄüí°üëçüëè
- –ü–æ–∫–∞–∑—ã–≤–∞–π —ç–º–æ—Ü–∏–∏ –∏ —Ä–µ–∞–∫—Ü–∏—é
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ –¥–µ–ª—É
- –ò–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ "–±–æ—Ç–Ω–æ—Å—Ç–∏"

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:
- "–¢–æ—á–Ω–æ! üî•"
- "–ö—Ä—É—Ç–∞—è —Å—Ö–µ–º–∞ ‚ö°Ô∏è"
- "–ü–æ–ø—Ä–æ–±—É—é üòÅ"
- "–ì–¥–µ –¥–µ—Ç–∞–ª–∏? üí°"
- "–ú–æ—â–Ω–æ! üí™"
- "–ê –∫–∞–∫ —Å...? ü§î"
- "–ë–æ–º–±–∞! üöÄ"
- "–°–æ–≥–ª–∞—Å–µ–Ω üëç"

–ï—Å–ª–∏ –≤ –ø–æ—Å—Ç–µ –µ—Å—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/—Å—Ö–µ–º/–¥–∏–∞–≥—Ä–∞–º–º), –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å—é –≥—Ä—É–ø–ø—É —Ü–µ–ª–∏–∫–æ–º –∏ —Ä–µ–∞–≥–∏—Ä—É–π –Ω–∞ –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É."""

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {text}. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∂–∏–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É:\n\n{text}"}
        ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if photos_base64:
            content = [{"type": "text", "text": f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∂–∏–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É:\n\n{text}"}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
            for i, photo_base64 in enumerate(photos_base64):
                content.append({
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{photo_base64}"
                    }
                })
            
            messages[1]["content"] = content

        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
        model = "gpt-4o" if photos_base64 else "gpt-4o"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {PROXY_URL}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        channel_context = f"\n–û –∫–∞–Ω–∞–ª–µ: {channel_description}" if channel_description else ""
        
        system_prompt = f"""–¢—ã —É–º–Ω—ã–π –∏ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –≤ Telegram –∫–∞–Ω–∞–ª–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ, —è—Ä–∫–∏–µ –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.

–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel_name}
–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel_context}

–ü–†–ê–í–ò–õ–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:
- –î–ª–∏–Ω–∞: 2-6 —Å–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º
- –°—Ç–∏–ª—å: –∂–∏–≤–æ–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π emoji, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞: üòÅ‚ö°Ô∏èüî•üòÇüí™üéØüöÄüí°üëçüëè
- –ü–æ–∫–∞–∑—ã–≤–∞–π —ç–º–æ—Ü–∏–∏ –∏ —Ä–µ–∞–∫—Ü–∏—é
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ –¥–µ–ª—É
- –ò–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ "–±–æ—Ç–Ω–æ—Å—Ç–∏"

–ï—Å–ª–∏ –≤ –ø–æ—Å—Ç–µ –µ—Å—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –∏ —á—Ç–æ –Ω–∞ –Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ

–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∂–∏–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É:"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º input –¥–ª—è Responses API
        if photos_base64:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            input_content = [
                { "type": "input_text", "text": f"{system_prompt}\n\n{text}" }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
            for photo_base64 in photos_base64:
                input_content.append({
                    "type": "input_image",
                    "image_url": f"data:image/jpeg;base64,{photo_base64}"
                })
            
            response = await client.responses.create(
                model=model,
                input=[{
                    "role": "user",
                    "content": input_content
                }]
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π input
            response = await client.responses.create(
                model=model,
                input=f"{system_prompt}\n\n{text}"
            )

        comment = response.output_text.strip()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment[:50]}...")
        
        return comment

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç! üëç"


def image_to_base64(image_path: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
    
    Args:
        image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    
    Returns:
        str: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
    """
    try:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64: {e}")
        return None


async def close_http_client():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π)"""
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    # –ø–æ—ç—Ç–æ–º—É —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    pass
