import asyncio
import logging
import os
import tempfile
from pathlib import Path
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
from models import Comment, CommentStatus
from openai_handler import generate_comment, image_to_base64
from bot import send_comment_preview
from channels_config import CHANNELS

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = None

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ temp
TEMP_DIR = Path("temp")


def ensure_temp_dir():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    TEMP_DIR.mkdir(exist_ok=True)
    logger.info(f"–ü–∞–ø–∫–∞ temp —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {TEMP_DIR.absolute()}")


def get_temp_file_path(suffix: str = '.jpg') -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ temp"""
    ensure_temp_dir()
    return str(TEMP_DIR / f"temp_{os.urandom(8).hex()}{suffix}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
event_handlers = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª—å–±–æ–º–æ–≤)
message_groups = {}  # {group_id: [messages]}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
processed_groups = set()  # {group_id}


async def process_message_group(group_id, channel_name: str, channel_config: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª—å–±–æ–º) –∫–∞–∫ –æ–¥–∏–Ω –ø–æ—Å—Ç
    
    Args:
        group_id: ID –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        channel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
    """
    if group_id not in message_groups:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞—Å—å –ª–∏ —É–∂–µ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞
    if group_id in processed_groups:
        logger.info(f"   ‚è≠Ô∏è  –ì—Ä—É–ø–ø–∞ {group_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
    processed_groups.add(group_id)
    
    messages = message_groups[group_id]
    logger.info(f"üñºÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (Group ID: {group_id})")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—Ä—É–ø–ø—ã, —Ñ–∏–ª—å—Ç—Ä—É—è –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
    all_text = []
    all_photos = []
    all_photo_paths = []
    main_message_id = None
    valid_messages = []
    
    for message in messages:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        is_audio_video_only = False
        if message.media and not message.text:
            if isinstance(message.media, MessageMediaDocument):
                if hasattr(message.media.document, 'mime_type'):
                    mime_type = message.media.document.mime_type
                    if mime_type.startswith('video/') or mime_type.startswith('audio/'):
                        is_audio_video_only = True
        
        if is_audio_video_only:
            logger.info(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} - —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            continue
        
        valid_messages.append(message)
        
        if message.text:
            all_text.append(message.text)
        if message.media and isinstance(message.media, MessageMediaPhoto):
            try:
                photo_path = await client.download_media(message.media, file=get_temp_file_path('.jpg'))
                if photo_path:
                    photo_base64 = image_to_base64(photo_path)
                    all_photos.append(photo_base64)
                    all_photo_paths.append(photo_path)
                    if main_message_id is None:
                        main_message_id = message.id
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")
    
    if not valid_messages:
        logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ)")
        return
    
    if not all_text and not all_photos:
        logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ")
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    post_text = " ".join(all_text) if all_text else ""
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –¥–ª—è AI
    photos_base64 = all_photos if all_photos else None
    
    logger.info(f"   üìù –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {post_text[:100]}...")
    logger.info(f"   üì∏ –§–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ: {len(all_photos)}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel_description = None
        for channel_name_check, channel_info in CHANNELS.items():
            if channel_info["channel_id"] == channel_config["channel_id"]:
                channel_description = channel_info.get("description")
                break
        
        generated_comment = await generate_comment(post_text, photos_base64, channel_description, channel_name)
        logger.info(f"   ü§ñ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {generated_comment[:50]}...")
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        generated_comment = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç! üëç"
    
    # –ù–∞—Ö–æ–¥–∏–º chat_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    chat_id = None
    for channel_name_check, channel_info in CHANNELS.items():
        if channel_info["channel_id"] == channel_config["channel_id"]:
            chat_id = channel_info["chat_id"]
            break
    
    if not chat_id:
        logger.warning(f"Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_config['channel_id']}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    comment_record = await Comment.create(
        channel_id=channel_config["channel_id"],
        message_id=main_message_id or valid_messages[0].id,
        generated_comment=generated_comment,
        post_text=post_text,
        photo_path=all_photo_paths[0] if all_photo_paths else None,
        status=CommentStatus.PENDING
    )
    
    logger.info(f"   üíæ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID {comment_record.id}, message_id={comment_record.message_id}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –≤ –±–æ—Ç
    logger.info(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç...")
    await send_comment_preview(
        channel_name=channel_name,
        channel_id=channel_config["channel_id"],
        message_id=main_message_id or valid_messages[0].id,
        post_text=post_text,
        comment=generated_comment,
        comment_record_id=comment_record.id,
        photo_paths=all_photo_paths  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
    )
    logger.info(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—É
    del message_groups[group_id]


async def send_message_with_retry(event, response, max_retries=10, retry_delay=60):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ Telegram
        response: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    """
    for attempt in range(max_retries):
        try:
            await event.reply(response)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{response}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            return True
            
        except FloodWaitError as e:
            wait_time = e.seconds
            logger.warning(f"FloodWaitError –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(wait_time)
            # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è FloodWaitError –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
            try:
                await event.reply(response)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{response}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ FloodWaitError")
                return True
            except Exception as retry_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ FloodWaitError: {retry_error}")
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ FloodWaitError, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π
        if attempt < max_retries - 1:
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(retry_delay)
    
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '{response}' –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False


async def handle_channel_message(event, channel_name: str, channel_config: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ Telegram
        channel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
    """
    try:
        message = event.message
        sender_id = message.sender_id
        chat_id = event.chat_id
        channel_id = channel_config["channel_id"]
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: sender_id={sender_id}, chat_id={chat_id}, channel_id={channel_id}")
        
        if sender_id != channel_id:
            logger.info(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (sender_id={sender_id}, chat_id={chat_id})")
            return
        logger.info(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ (sender_id={sender_id}, chat_id={chat_id})")
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ {channel_name} (ID: {channel_id})")
        logger.info(f"   Message ID: {message.id}")
        logger.info(f"   –î–∞—Ç–∞: {message.date}")
        logger.info(f"   –¢–∏–ø –º–µ–¥–∏–∞: {type(message.media).__name__ if message.media else 'None'}")
        logger.info(f"   –ï—Å—Ç—å —Ç–µ–∫—Å—Ç: {'–î–∞' if message.text else '–ù–µ—Ç'}")
        logger.info(f"   –¢–µ–∫—Å—Ç: {message.text[:100] if message.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª—å–±–æ–º)
        if hasattr(message, 'grouped_id') and message.grouped_id:
            group_id = message.grouped_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞—Å—å –ª–∏ —É–∂–µ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞
            if group_id in processed_groups:
                logger.info(f"   ‚è≠Ô∏è  –ì—Ä—É–ø–ø–∞ {group_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            logger.info(f"   üñºÔ∏è  –ì–†–£–ü–ü–ê –°–û–û–ë–©–ï–ù–ò–ô! Group ID: {group_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            if group_id not in message_groups:
                message_groups[group_id] = []
            
            message_groups[group_id].append(message)
            logger.info(f"   üì• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É. –í—Å–µ–≥–æ –≤ –≥—Ä—É–ø–ø–µ: {len(message_groups[group_id])}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
            await asyncio.sleep(3)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å–æ–±—Ä–∞–Ω—ã
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
            # –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            if len(message_groups[group_id]) >= 2:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–ª—å–±–æ–º–∞
                logger.info(f"   ‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–±—Ä–∞–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
                await process_message_group(group_id, channel_name, channel_config)
            else:
                logger.info(f"   ‚è≥ –ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã...")
            
            return
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –≥—Ä—É–ø–ø–∞)
        logger.info(f"   üìù –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –≥—Ä—É–ø–ø–∞)")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = message.text or ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        if message.media and not post_text:
            if isinstance(message.media, MessageMediaDocument):
                if hasattr(message.media.document, 'mime_type'):
                    mime_type = message.media.document.mime_type
                    if mime_type.startswith('video/'):
                        logger.info(f"   üé• –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                        return
                    elif mime_type.startswith('audio/'):
                        logger.info(f"   üéµ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                        return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        photo_path = None
        photo_base64 = None
        
        if message.media:
            if isinstance(message.media, MessageMediaPhoto):
                logger.info(f"   üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ...")
                try:
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É temp
                    photo_path = await client.download_media(message.media, file=get_temp_file_path('.jpg'))
                    if photo_path:
                        photo_base64 = image_to_base64(photo_path)
                        logger.info(f"   ‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64")
                    else:
                        logger.warning(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ")
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            elif isinstance(message.media, MessageMediaDocument):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ
                if hasattr(message.media.document, 'mime_type'):
                    mime_type = message.media.document.mime_type
                    if mime_type.startswith('video/'):
                        logger.info(f"   üé• –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ (MIME: {mime_type})")
                    elif mime_type.startswith('audio/'):
                        logger.info(f"   üéµ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ (MIME: {mime_type})")
                    else:
                        logger.info(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç (MIME: {mime_type}) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                else:
                    logger.info(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ MIME —Ç–∏–ø–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            else:
                logger.info(f"   üìé –î—Ä—É–≥–æ–π —Ç–∏–ø –º–µ–¥–∏–∞: {type(message.media).__name__} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        else:
            logger.info(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            channel_description = None
            for channel_name_check, channel_info in CHANNELS.items():
                if channel_info["channel_id"] == channel_id:
                    channel_description = channel_info.get("description")
                    break
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–æ)
            photos_base64 = [photo_base64] if photo_base64 else None
            generated_comment = await generate_comment(post_text, photos_base64, channel_description, channel_name)
            logger.info(f"   ü§ñ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {generated_comment[:50]}...")
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            generated_comment = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç! üëç"
        
        # –ù–∞—Ö–æ–¥–∏–º chat_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        chat_id = None
        for channel_name, channel_info in CHANNELS.items():
            if channel_info["channel_id"] == channel_id:
                chat_id = channel_info["chat_id"]
                break
        
        if not chat_id:
            logger.warning(f"Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å: channel_id={channel_id}, message_id={message.id}")
        
        comment_record = await Comment.create(
            channel_id=channel_id,
            message_id=message.id,
            generated_comment=generated_comment,
            post_text=post_text,
            photo_path=photo_path,
            status=CommentStatus.PENDING
        )
        
        logger.info(f"   üíæ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID {comment_record.id}, message_id={comment_record.message_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –≤ –±–æ—Ç
        logger.info(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç...")
        await send_comment_preview(
            channel_name=channel_name,
            channel_id=channel_id,
            message_id=message.id,
            post_text=post_text,
            comment=generated_comment,
            comment_record_id=comment_record.id,
            photo_path=photo_path,
            photo_paths=[photo_path] if photo_path else None
        )
        logger.info(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except FloodWaitError as e:
        wait_time = e.seconds
        logger.warning(f"FloodWaitError –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(wait_time)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")




async def send_comment_to_post(comment_record) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –≤ —á–∞—Ç–µ
    
    Args:
        comment_record: –ó–∞–ø–∏—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –ë–î
    
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
    """
    channel_id = comment_record.channel_id
    message_id = comment_record.message_id
    comment = comment_record.generated_comment
    
    try:
        if not client:
            logger.error("Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º chat_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        chat_id = None
        for channel_name, channel_info in CHANNELS.items():
            if channel_info["channel_id"] == channel_id:
                chat_id = channel_info["chat_id"]
                break
        
        if not chat_id:
            logger.error(f"Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID –≤ —á–∞—Ç–µ
        message = await client.get_messages(chat_id, ids=message_id)
        if not message:
            logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = None
        try:
            sent_message = await message.reply(comment)
            success = True
        except FloodWaitError as e:
            wait_time = e.seconds
            logger.warning(f"FloodWaitError –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(wait_time)
            try:
                sent_message = await message.reply(comment)
                success = True
            except Exception as retry_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ FloodWaitError: {retry_error}")
                success = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            success = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∑–∞–ø–∏—Å–∏
        if success and sent_message:
            comment_record.sent_message_id = sent_message.id
            await comment_record.save()
            logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å ID: {sent_message.id}")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return False


async def setup_channel_handlers(telethon_client: TelegramClient):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Args:
        telethon_client: –ö–ª–∏–µ–Ω—Ç Telethon
    """
    global client
    client = telethon_client
    
    for channel_name, channel_config in CHANNELS.items():
        try:
            chat_id = channel_config["chat_id"]
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            handler = lambda event, name=channel_name, config=channel_config: handle_channel_message(event, name, config)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            telethon_client.add_event_handler(handler, events.NewMessage(chats=chat_id))
            event_handlers[channel_name] = handler
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_name}' (—á–∞—Ç ID: {chat_id})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_name}': {e}")


async def cleanup_temp_files():
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    try:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ temp
        if TEMP_DIR.exists():
            for file_path in TEMP_DIR.iterdir():
                if file_path.is_file():
                    try:
                        file_path.unlink()
                        logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        for channel_name, channel_config in CHANNELS.items():
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ñ–æ—Ç–æ
            comments_with_photos = await Comment.filter(
                channel_id=channel_config["channel_id"],
                photo_path__isnull=False
            ).all()
            
            for comment in comments_with_photos:
                if comment.photo_path and os.path.exists(comment.photo_path):
                    try:
                        os.remove(comment.photo_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∏–∑ –ë–î: {comment.photo_path}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {comment.photo_path}: {e}")
                        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
