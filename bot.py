import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from models import Comment, CommentStatus
from config import BOT_TOKEN, ADMIN_USER_ID
from channels_config import CHANNELS
# –ò–º–ø–æ—Ä—Ç send_comment_to_post —É–±—Ä–∞–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
_bot_running = True

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
_send_comment_func = None


def set_send_comment_function(func):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    global _send_comment_func
    _send_comment_func = func


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id != ADMIN_USER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    text = "ü§ñ –ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤\n\n–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    await message.answer(text)


@dp.callback_query(F.data.startswith("send:"))
async def send_comment_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º comment_record_id –∏–∑ callback_data
        _, comment_record_id_str = callback.data.split(":")
        comment_record_id = int(comment_record_id_str)
        
        logger.info(f"–ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ ID –∑–∞–ø–∏—Å–∏: {comment_record_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –ë–î –ø–æ ID –∑–∞–ø–∏—Å–∏
        logger.info(f"–ò—â–µ–º –∑–∞–ø–∏—Å—å —Å ID {comment_record_id} –∏ —Å—Ç–∞—Ç—É—Å–æ–º PENDING")
        comment_record = await Comment.filter(
            id=comment_record_id,
            status=CommentStatus.PENDING
        ).first()
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω PENDING, –ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–ø–∏—Å—å —Å —ç—Ç–∏–º ID
        if not comment_record:
            logger.info(f"PENDING –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –ª—é–±—É—é –∑–∞–ø–∏—Å—å —Å ID {comment_record_id}")
            comment_record = await Comment.filter(id=comment_record_id).first()
            
            if comment_record:
                logger.info(f"–ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å: {comment_record.status}")
                logger.info(f"–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏: channel_id={comment_record.channel_id}, message_id={comment_record.message_id}")
            else:
                logger.error(f"–ó–∞–ø–∏—Å—å —Å ID {comment_record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!")
            
            await callback.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ PENDING –∑–∞–ø–∏—Å—å: ID={comment_record.id}, channel_id={comment_record.channel_id}, message_id={comment_record.message_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ Telethon
        if not _send_comment_func:
            await callback.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
            
        success = await _send_comment_func(comment_record)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            comment_record.status = CommentStatus.SENT
            await comment_record.save()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            # –§–æ—Ä–º–∞—Ç: https://t.me/c/{chat_id}/{sent_message_id}
            chat_id = None
            for channel_name, channel_info in CHANNELS.items():
                if channel_info["channel_id"] == comment_record.channel_id:
                    chat_id = channel_info["chat_id"]
                    break
            
            if chat_id and comment_record.sent_message_id:
                # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –º–∏–Ω—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º 1000000000000 –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
                if chat_id < 0:
                    chat_id_str = str(chat_id)[4:]  # –£–±–∏—Ä–∞–µ–º -100
                else:
                    chat_id_str = str(chat_id)
                
                comment_url = f"https://t.me/c/{chat_id_str}/{comment_record.sent_message_id}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
                        url=comment_url
                    )]
                ])
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await callback.message.edit_reply_markup(reply_markup=markup)
                await callback.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await callback.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
            comment_record.status = CommentStatus.FAILED
            await comment_record.save()
            
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")


async def send_comment_preview(channel_name: str, channel_id: int, message_id: int, 
                             post_text: str, comment: str, comment_record_id: int, 
                             photo_path: str = None, photo_paths: list = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    
    Args:
        channel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel_id: ID –∫–∞–Ω–∞–ª–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
        post_text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        comment: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        comment_record_id: ID –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        photo_path: –ü—É—Ç—å –∫ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        photo_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ (–¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø)
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name} (ID: {channel_id})")
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üì¢ <b>–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ: {channel_name}</b>\n\n"
        text += f"<b>–¢–µ–∫—Å—Ç:</b> {post_text[:500]}{'...' if len(post_text) > 500 else ''}\n\n"
        text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        callback_data = f"send:{comment_record_id}"
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å callback_data: {callback_data}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
        # –§–æ—Ä–º–∞—Ç: https://t.me/c/{chat_id}/{message_id}
        chat_id = None
        for channel_name_check, channel_info in CHANNELS.items():
            if channel_info["channel_id"] == channel_id:
                chat_id = channel_info["chat_id"]
                break
        
        post_url = None
        if chat_id:
            # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –º–∏–Ω—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º 1000000000000 –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
            if chat_id < 0:
                chat_id_str = str(chat_id)[4:]  # –£–±–∏—Ä–∞–µ–º -100
            else:
                chat_id_str = str(chat_id)
            
            post_url = f"https://t.me/c/{chat_id_str}/{message_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        buttons = []
        row_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç" –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
        if post_url:
            row_buttons.append(InlineKeyboardButton(
                text="üëÄ –°–º–æ—Ç—Ä–µ—Ç—å", 
                url=post_url
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        row_buttons.append(InlineKeyboardButton(
            text="üî¥ –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=callback_data
        ))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä—è–¥
        if row_buttons:
            buttons.append(row_buttons)
        
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        if photo_paths and len(photo_paths) > 1:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            from aiogram.types import FSInputFile, InputMediaPhoto
            media_group = []
            for i, path in enumerate(photo_paths):
                photo_file = FSInputFile(path)
                if i == 0:
                    # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    media_group.append(InputMediaPhoto(media=photo_file, caption=text, parse_mode="HTML"))
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                    media_group.append(InputMediaPhoto(media=photo_file))
            
            await bot.send_media_group(
                chat_id=ADMIN_USER_ID,
                media=media_group
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
            await bot.send_message(
                chat_id=ADMIN_USER_ID,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=markup,
                parse_mode="HTML"
            )
        elif photo_path or (photo_paths and len(photo_paths) == 1):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ
            from aiogram.types import FSInputFile
            single_photo_path = photo_path or photo_paths[0]
            photo_file = FSInputFile(single_photo_path)
            await bot.send_photo(
                chat_id=ADMIN_USER_ID,
                photo=photo_file,
                caption=text,
                reply_markup=markup,
                parse_mode="HTML"
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=text,
                reply_markup=markup,
                parse_mode="HTML"
            )
            
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")


async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global _bot_running
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot, stop_signals=None)
    except asyncio.CancelledError:
        logger.info("–ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        _bot_running = False
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global _bot_running
    _bot_running = False
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
        await dp.stop_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: {e}")
    
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        await bot.session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")


